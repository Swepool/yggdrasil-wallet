name: Aesir Release Pipeline

on:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{steps.create_release.outputs.upload_url}}
      
    
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build:
    name: "Build: ${{ matrix.config.name }} / ${{ matrix.config.platform }}"
    runs-on: ${{ matrix.config.os }}
    needs: [create-release]

    strategy:
      fail-fast: true
      matrix:
        config:
          - {
            name: "Windows Latest",
            os: windows-latest,
            platform: x64
          }
          - {
            name: "Ubuntu Latest",
            os: ubuntu-latest,
            platform: x64
          }
          - {
            name: "macOS-x64",
            os: macos-latest,
            platform: x64
          }
          - {
            name: "macOS arm64",
            os: macos-latest,
            platform: arm64
          }

    env:
      PLATFORM: ${{ matrix.config.platform }}
      VERSION: ${{ github.ref_name }}  # This extracts the tag name

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 18.13.0

      - name: Install python-setuptools on macOS
        if: matrix.config.os == 'macos-11' || matrix.config.os == 'macos-latest'
        run: brew install python-setuptools

      - name: Install snap on Linux
        if: matrix.config.os == 'ubuntu-latest'
        run: sudo snap install snapcraft --classic

      - name: Install dependencies
        run: npm install --quiet

      - name: Build ${{ matrix.config.name }}
        if: matrix.config.os == 'windows-latest'
        run: npm run build:win-x64

      - name: Build ${{ matrix.config.name }}
        if: matrix.config.os == 'ubuntu-latest'
        run: npm run build:linux-$PLATFORM

      - name: Build ${{ matrix.config.name }}
        if: matrix.config.os == 'macos-latest'
        run: npm run build:mac-$PLATFORM

      - name: Check artifacts --DEBUG--
        run: ls dist

      - name: Upload Release Asset Ubuntu
        if: matrix.config.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/Aesir_${{ env.VERSION }}_amd64.deb
          asset_name: Aesir_${{ env.VERSION }}_amd64.deb
          asset_content_type: application/octet-stream

      - name: Upload Release Asset macOS
        if: matrix.config.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/Aesir-${{ env.VERSION }}-$PLATFORM.dmg
          asset_name: Aesir-${{ env.VERSION }}-$PLATFORM.dmg
          asset_content_type: application/octet-stream

      - name: Upload Release Asset Windows
        if: matrix.config.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/Aesir Setup ${{ env.VERSION }}.exe
          asset_name: Aesir Setup ${{ env.VERSION }}.exe
          asset_content_type: application/x-msdownload
